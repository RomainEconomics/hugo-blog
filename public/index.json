
[{"content":"This blog serves as a platform for me to document my journey and share insights. It\u0026rsquo;s a space for reflection, learning, and connecting with others who have similar interests.\nFeel free to reach out to me directly by email or message with any questions or interesting opportunities!\n","date":"16 April 2024","externalUrl":null,"permalink":"/","section":"","summary":"This blog serves as a platform for me to document my journey and share insights.","title":"","type":"page"},{"content":" 1 Billion Rows Challenge # Comparing Python and Rust for Processing Large Datasets # In this post, I will share my experience tackling the 1 Billion Rows Challenge. This consists in reading a dataset with 1 billion rows and 2 columns (city, temp) and computing the minimum, maximum, and mean temperaturefor each city. I approached this problem using both Python and Rust to compare their performance and capabilities. Below, I will walk you through the different strategies I employed for each language and the results of my benchmarks.\nNote that all the code and benchmarks are available in the github repo:\nRomainEconomics/1rbc Rust 0 0 To generate the file used for the computation, go the 1BRC repo.\nBenchmarks # As a teaser, here the results of the benchmarks:\nStrategy Language Mean StdDev Median Min Max v6_multi_threading_v1 Rust 4.71 0.17 4.76 4.46 4.88 baseline_ibis_duckdb Python 11.25 0.52 11.34 10.71 11.82 baseline_polars Python 20.18 12.76 11.81 11.63 40.37 v5_mmap Rust 29.85 1.12 29.34 29.27 31.84 v5_pypy_mp_v2 Python 34.77 9.42 32.78 24.41 46.29 v4_parse_temp Rust 39.34 0.13 39.28 39.24 39.56 v3_fast_float Rust 41.97 0.07 41.94 41.92 42.08 v4_pypy_mp Python 42.67 7.67 39.17 34.52 54.08 v2_faster_hash Rust 44.32 0.15 44.28 44.19 44.5 v1_bytes Rust 53.73 0.78 54.14 52.4 54.3 v0_buffer_reader Rust 77.43 5.76 75.23 74.19 87.68 v3_pypy_temp_parsing Python 96.24 0.55 96.32 95.52 96.81 v2_pypy_bytes Python 124.39 0.78 124.15 123.7 125.73 v1_pypy_list Python 181.59 0.37 181.74 181.09 182 v0_builtin_with_pypy Python 184.76 1.34 184.33 182.98 186.19 baseline_pandas Python 217.59 4.66 215.74 214.61 225.84 v0_builtin Python 703.82 12.6 699.51 695.57 725.97 Python Strategies # Baseline in Pure Python # I started with a baseline implementation in pure Python. This approach was straightforward but not optimized for performance.\nimport sys class TempStat: def __init__(self, temp: float): self.min_val = temp self.max_val = temp self.sum_val = temp self.count = 1 def mean(self) -\u0026gt; float: return self.sum_val / self.count def update(self, temp: float): self.min_val = min(self.min_val, temp) self.max_val = max(self.max_val, temp) self.sum_val += temp self.count += 1 if __name__ == \u0026#34;__main__\u0026#34;: file_path = sys.argv[1] cities: dict[str, TempStat] = {} with open(file_path, \u0026#34;r\u0026#34;) as file: for idx, line in enumerate(file): city, temp = line.split(\u0026#34;;\u0026#34;) if city in cities: cities[city].update(float(temp)) else: cities[city] = TempStat(float(temp)) This code runs, but is very slow (more than 700 seconds).\nSeveral problems can be identified:\nIt uses the python interpreter, which is not the most performant, as we will see. We read each line as a string, instead of bytes, which is slower. Each temperature is parsed to float Only one thread, and one core is used We will try to improve on these points in the following sections.\nBut first, even if the goal is to use plain Python and Rust, as possible, it is interesting to compare our results to some more popular, and more optimized libraries.\nUsing Common Libraries # Next, I leveraged some popular Python libraries known for their performance with large datasets:\nPandas: A powerful data manipulation library. The most used one in Python, but not the fastest. Polars: A fast DataFrame library. DuckDB: An in-process SQL OLAP database management system. As an example, the code for DuckDB (using Ibis as a wrapper around it):\nimport sys import ibis if __name__ == \u0026#34;__main__\u0026#34;: file_path = sys.argv[1] data = ibis.read_csv(file_path, names=[\u0026#34;city\u0026#34;, \u0026#34;temp\u0026#34;], sep=\u0026#34;;\u0026#34;) res = ( data.group_by(\u0026#34;city\u0026#34;) .aggregate( min_val=data.temp.min(), max_val=data.temp.max(), mean_val=data.temp.mean().round(1), ) .order_by(\u0026#34;city\u0026#34;) ) df = res.to_pandas() The advantage of using those libraries, is that it can be really easy to use, and they are already optimized for performance (the code runs in almost 10 sec on my machine). Except for Pandas, for which, if you try to read the file with the default parameters, you will likely run out of memory.\nPyPy # I also tried running the code with PyPy, a just-in-time compiler for Python, to see if it could offer any performance improvements.\nWe went from 700 seconds to 184 seconds, which is a good improvement without changing any code. We will thus stick with that interpreter for the following optimizations.\nOptimizations # Reading File Bytes: Instead of reading the file line by line, I read the entire file as bytes. 60 seconds speedup Parsing Temperature as Integer: Parsing the temperature as an integer instead of a float to save processing time. Almost 30 seconds gained, from 124 to 96 seconds Multiprocessing: Since Python\u0026rsquo;s Global Interpreter Lock (GIL) limits the effectiveness of multithreading, I used multiprocessing to parallelize the task. 62 seconds - from 96 to 34 seconds Reading the file as bytes and parsing the temperature as an integer were the most significant optimizations before we were able to use multiprocessing.\nHowever, to read a file and process it using multiple core, we need to first ensures each core sees different chunks.\nFor that, I defined this function:\ndef find_chunk_boundaries(filename: str, workers: int) -\u0026gt; list[tuple[int, int]]: file_size = os.path.getsize(filename) chunk_size = file_size // workers chunks = [] def find_new_line(f: io.BufferedReader, start: int): f.seek(start) while True: chunk = f.read(2048) if b\u0026#34;\\n\u0026#34; in chunk: return start + chunk.index(b\u0026#34;\\n\u0026#34;) + 1 if len(chunk) \u0026lt; 2048: return f.tell() start += len(chunk) with open(filename, \u0026#34;rb\u0026#34;) as f: start = 0 for _ in range(workers): end = find_new_line(f, start + chunk_size) chunks.append((start, end)) start = end return chunks This function will return the boundaries of the chunks that each worker will process. Moreover, we need to ensure that the end of a chunk fits exactly the end of a line, to avoid splitting a line between two workers.\nUsing all the cores on my machine (20) allowed to divide by almost 3 the time needed to process the file.\nComing from 700 seconds, we are now at 34 seconds, which is a good improvement.\nBut we\u0026rsquo;re still far from the performance of Polars or DuckDB.\nRust Strategies # Baseline in Pure Rust # I started with a baseline implementation in pure Rust using a buffered reader.\nOptimizations # Using Bytes: Reading the file as bytes for faster processing. Faster Hash Map: Using a more efficient hash map for storing city temperatures. Faster Float Parsing: Optimizing the parsing of temperature values. Parsing Temperature as Integer: Similar to the Python approach, parsing the temperature as an integer. Memory-Mapped Files (mmap): Using memory-mapped files for faster file I/O. Multithreading: Utilizing Rust\u0026rsquo;s powerful multithreading capabilities with Arc (Atomic Reference Counting) for shared state. Results # Strategy Language Mean StdDev Median Min Max v6_multi_threading_v1 Rust 4.71 0.17 4.76 4.46 4.88 baseline_ibis_duckdb Python 11.25 0.52 11.34 10.71 11.82 baseline_polars Python 20.18 12.76 11.81 11.63 40.37 v5_mmap Rust 29.85 1.12 29.34 29.27 31.84 v5_pypy_mp_v2 Python 34.77 9.42 32.78 24.41 46.29 v4_parse_temp Rust 39.34 0.13 39.28 39.24 39.56 v3_fast_float Rust 41.97 0.07 41.94 41.92 42.08 v4_pypy_mp Python 42.67 7.67 39.17 34.52 54.08 v2_faster_hash Rust 44.32 0.15 44.28 44.19 44.5 v1_bytes Rust 53.73 0.78 54.14 52.4 54.3 v0_buffer_reader Rust 77.43 5.76 75.23 74.19 87.68 v3_pypy_temp_parsing Python 96.24 0.55 96.32 95.52 96.81 v2_pypy_bytes Python 124.39 0.78 124.15 123.7 125.73 v1_pypy_list Python 181.59 0.37 181.74 181.09 182 v0_builtin_with_pypy Python 184.76 1.34 184.33 182.98 186.19 baseline_pandas Python 217.59 4.66 215.74 214.61 225.84 v0_builtin Python 703.82 12.6 699.51 695.57 725.97 Analysis # Rust # Rust consistently outperformed Python in all benchmarks for single threaded code. The fastest Rust implementation, which used multithreading, completed the task in just 4.71 seconds on average.\nPython # Python, while slower than Rust, offers a rich ecosystem of libraries that can call C, C++, or even Rust code, making it easier to write and maintain. The fastest Python implementation using DuckDB completed the task in 11.25 seconds on average. PyPy provided some performance improvements, but it was still not as fast as Rust.\nConclusion # This exercise was a valuable learning experience. It highlighted the performance differences between Python and Rust and provided insights into various optimization techniques. While Rust is clearly faster, Python\u0026rsquo;s ease of use and extensive library support make it a strong contender for many applications.\nNotably, I learned a lot about using multithreading in Rust (without using Rayon, a common library used for multithreading), memory-mapped files, and other optimization strategies. If performance is critical and you are comfortable with Rust, this seems like a good choice. However, for ease of development and leveraging existing libraries, Python remains a powerful tool.\n","date":"16 April 2024","externalUrl":null,"permalink":"/posts/1rbc/","section":"Posts","summary":"1 Billion Rows Challenge # Comparing Python and Rust for Processing Large Datasets # In this post, I will share my experience tackling the 1 Billion Rows Challenge.","title":"1 Billion Rows Challenge","type":"posts"},{"content":"","date":"16 April 2024","externalUrl":null,"permalink":"/tags/data-engineering/","section":"Tags","summary":"","title":"Data-Engineering","type":"tags"},{"content":"","date":"16 April 2024","externalUrl":null,"permalink":"/tags/duckdb/","section":"Tags","summary":"","title":"Duckdb","type":"tags"},{"content":"","date":"16 April 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"16 April 2024","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"16 April 2024","externalUrl":null,"permalink":"/tags/rust/","section":"Tags","summary":"","title":"Rust","type":"tags"},{"content":"","date":"16 April 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"4 March 2024","externalUrl":null,"permalink":"/notes/","section":"Notes","summary":"","title":"Notes","type":"notes"},{"content":"Workflow orchestrator for Python\nWhat to run Where to run it How to run it When to run it Contract between code, infrastructure, and the triggers\nEvent driven orchestration\n","date":"4 March 2024","externalUrl":null,"permalink":"/notes/python/prefect/","section":"Notes","summary":"Workflow orchestrator for Python","title":"Prefect","type":"notes"},{"content":"","date":"15 April 2023","externalUrl":null,"permalink":"/tags/langchain/","section":"Tags","summary":"","title":"Langchain","type":"tags"},{"content":" See what\u0026rsquo;s possible with Blowfish. This section contains all my current projects.\n","date":"15 April 2023","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"See what\u0026rsquo;s possible with Blowfish.","title":"Projects","type":"projects"},{"content":"","date":"15 April 2023","externalUrl":null,"permalink":"/tags/rag/","section":"Tags","summary":"","title":"Rag","type":"tags"},{"content":"Build a RAG and use all tools and strategies available to improve performances\n","date":"15 April 2023","externalUrl":null,"permalink":"/projects/rag/","section":"Projects","summary":"Build a RAG and use all tools and strategies available to improve performances","title":"RAG","type":"projects"},{"content":"","date":"15 April 2023","externalUrl":null,"permalink":"/tags/vectorstore/","section":"Tags","summary":"","title":"Vectorstore","type":"tags"},{"content":"","date":"15 April 2023","externalUrl":null,"permalink":"/tags/weaviate/","section":"Tags","summary":"","title":"Weaviate","type":"tags"},{"content":"My academic journey started with economics, but curiosity led me to explore the technical side of things.\nI started coding during COVID lockdown, and I never stopped since then.\nThis exploration has not only broadened my understanding but also shaped my career path in unexpected ways. Coding has become a significant part of my life, with Python being my go-to language, although I occasionally venture into TypeScript and Rust for specific projects.\nMy professional experience includes working with Docker and Kubernetes, focusing on deploying applications efficiently. Recently, I\u0026rsquo;ve been delving into the potential of Large Language Models (LLM) for extracting data from raw text documents. This work has been both challenging and rewarding, pushing me to continuously learn and adapt. I enjoy the process of exploring new technologies and ideas, always looking for ways to improve and innovate.\nIf you would like a newer unredacted version of my resume or have an interesting project or opportunity you would like to share, please don\u0026rsquo;t hesitate to reach out via email or linkedIn.\nExperience # Company Role Dates Location Iceberg Datalab Data Scientist Nov 2022 - Present Paris CEPREMAP Research Assistant 2021 - 2022 Paris Education # School Degree Dates Location IPSSI M2 Dev, Data, IA 2022 - 2023 Paris Paris 1 - Panthéon-Sorbonne M2 - Financial Economics 2021 - 2022 Paris PSE - Paris School of Economics M1 - APE 2020 - 2021 Paris Certifications # Certification Provider Year Azure Data Fundamentals Azure 2021 ","date":"11 November 2022","externalUrl":null,"permalink":"/about/","section":"","summary":"My academic journey started with economics, but curiosity led me to explore the technical side of things.","title":"Resume","type":"page"},{"content":"My projects\nIn addition to all the default Hugo shortcodes, Blowfish adds a few extras for additional functionality.\nAlert # alert outputs its contents as a stylised message box within your article. It\u0026rsquo;s useful for drawing attention to important information that you don\u0026rsquo;t want the reader to miss.\nParameter Description icon Optional. the icon to display on the left side.\nDefault: exclaimation triangle icon (Check out the icon shortcode for more details on using icons.) iconColor Optional. the color for the icon in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . cardColor Optional. the color for the card background in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . textColor Optional. the color for the text in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . The input is written in Markdown so you can format it however you please.\nExample 1: No params\n{{\u0026lt; alert \u0026gt;}} **Warning!** This action is destructive! {{\u0026lt; /alert \u0026gt;}} Warning! This action is destructive! Example 2: Unnamed param\n{{\u0026lt; alert \u0026#34;twitter\u0026#34; \u0026gt;}} Don\u0026#39;t forget to [follow me](https://twitter.com/nunocoracao) on Twitter. {{\u0026lt; /alert \u0026gt;}} Don\u0026rsquo;t forget to follow me on Twitter. Example 3: Named params\n{{\u0026lt; alert icon=\u0026#34;fire\u0026#34; cardColor=\u0026#34;#e63946\u0026#34; iconColor=\u0026#34;#1d3557\u0026#34; textColor=\u0026#34;#f1faee\u0026#34; \u0026gt;}} This is an error! {{\u0026lt; /alert \u0026gt;}} This is an error! Article # Article will embed a single article into a markdown file. The link to the file should be the .RelPermalink of the file to be embedded. Note that the shortcode will not display anything if it\u0026rsquo;s referencing it\u0026rsquo;s parent. Note: if you are running your website in a subfolder like Blowfish (i.e. /blowfish/) please include that path in the link.\nParameter Description link Required. the .RelPermalink to the target article. Example:\n{{\u0026lt; article link=\u0026#34;/docs/welcome/\u0026#34; \u0026gt;}} Badge # badge outputs a styled badge component which is useful for displaying metadata.\nExample:\n{{\u0026lt; badge \u0026gt;}} New article! {{\u0026lt; /badge \u0026gt;}} New article! Button # button outputs a styled button component which can be used to highlight a primary action. It has two optional variables href and target which can be used to specify the URL and target of the link.\nExample:\n{{\u0026lt; button href=\u0026#34;#button\u0026#34; target=\u0026#34;_self\u0026#34; \u0026gt;}} Call to action {{\u0026lt; /button \u0026gt;}} Call to action Carousel # carousel is used to showcase multiple images in an interactive and visually appealing way. This allows a user to slide through multiple images while only taking up the vertical space of a single one. All images are displayed using the full width of the parent component and using one of the predefined aspect ratios of 16:9, 21:9 or 32:9.\nParameter Description images Required. A regex string to match image names or URLs. aspectRatio Optional. The aspect ratio for the carousel. Either 16-9, 21-9 or 32-9. It is set to 16-9 by default. interval Optional. The interval for the auto-scrooling, specified in milliseconds. Defaults to 2000 (2s) Example 1: 16:9 aspect ratio and verbose list of images\n{{\u0026lt; carousel images=\u0026#34;{https://cdn.pixabay.com/photo/2016/12/11/12/02/mountains-1899264_960_720.jpg, gallery/03.jpg, gallery/01.jpg, gallery/02.jpg, gallery/04.jpg}\u0026#34; \u0026gt;}} Previous Nextsads Example 2: 21:9 aspect ratio and regex-ed list of images\n{{\u0026lt; carousel images=\u0026#34;gallery/*\u0026#34; aspectRatio=\u0026#34;21-9\u0026#34; interval=\u0026#34;2500\u0026#34; \u0026gt;}} Previous Nextsads Chart # chart uses the Chart.js library to embed charts into articles using simple structured data. It supports a number of different chart styles and everything can be configured from within the shortcode. Simply provide the chart parameters between the shortcode tags and Chart.js will do the rest.\nRefer to the official Chart.js docs for details on syntax and supported chart types.\nExample:\n{{\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;Tomato\u0026#39;, \u0026#39;Blueberry\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Lime\u0026#39;, \u0026#39;Orange\u0026#39;], datasets: [{ label: \u0026#39;# of votes\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\u0026lt; /chart \u0026gt;}} Figure # Blowfish includes a figure shortcode for adding images to content. The shortcode replaces the base Hugo functionality in order to provide additional performance benefits.\nWhen a provided image is a page resource, it will be optimised using Hugo Pipes and scaled in order to provide images appropriate to different device resolutions. If a static asset or URL to an external image is provided, it will be included as-is without any image processing by Hugo.\nThe figure shortcode accepts six parameters:\nParameter Description src Required. The local path/filename or URL of the image. When providing a path and filename, the theme will attempt to locate the image using the following lookup order: Firstly, as a page resource bundled with the page; then an asset in the assets/ directory; then finally, a static image in the static/ directory. alt Alternative text description for the image. caption Markdown for the image caption, which will be displayed below the image. class Additional CSS classes to apply to the image. href URL that the image should be linked to. target The target attribute for the href URL. nozoom nozoom=true disables the image \u0026ldquo;zoom\u0026rdquo; functionality. This is most useful in combination with a href link. default Special parameter to revert to default Hugo figure behaviour. Simply provide default=true and then use normal Hugo shortcode syntax. Blowfish also supports automatic conversion of images included using standard Markdown syntax. Simply use the following format and the theme will handle the rest:\n![Alt text](image.jpg \u0026#34;Image caption\u0026#34;) Example:\n{{\u0026lt; figure src=\u0026#34;abstract.jpg\u0026#34; alt=\u0026#34;Abstract purple artwork\u0026#34; caption=\u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34; \u0026gt;}} \u0026lt;!-- OR --\u0026gt; ![Abstract purple artwork](abstract.jpg \u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34;) Photo by Jr Korpa on Unsplash Gallery # gallery allows you to showcase multiple images at once, in a responsive manner with more varied and interesting layouts.\nIn order to add images to the gallery, use img tags for each image and add class=\u0026quot;grid-wXX\u0026quot; in order for the gallery to be able to identify the column width for each image. The widths available by default start at 10% and go all the way to 100% in 5% increments. For example, to set the width to 65%, set the class to grid-w65. Additionally, widths for 33% and 66% are also available in order to build galleries with 3 cols. You can also leverage tailwind\u0026rsquo;s responsive indicators to have a reponsive grid.\nExample 1: normal gallery\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} Example 2: responsive gallery\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} GitHub Card # github allows you to quickly link a github repository, all while showing and updating in realtime stats about it, such as the number of stars and forks it has.\nParameter Description repo [String] github repo in the format of username/repo Example 1:\n{{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo JavaScript 1046 311 GitLab Card # gitlab allows you to quickly link a GitLab Project (GitLab\u0026rsquo;s jargon for repo). It displays realtime stats about it, such as the number of stars and forks it has. Unlike github it can\u0026rsquo;t display the main programming language of a project. Finally, custom GitLab instance URL can be provided, as long as the api/v4/projects/ endpoint is available, making this shortcode compatible with most self-hosted / enterprise deployments.\nParameter Description projectID [String] gitlab numeric ProjectID baseURL [String] optional gitlab instance URL, default is https://gitlab.com/ Example 1:\n{{\u0026lt; gitlab projectID=\u0026#34;278964\u0026#34; \u0026gt;}} GitLab.org / GitLab GitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider. 5014 9663 Icon # icon outputs an SVG icon and takes the icon name as its only parameter. The icon is scaled to match the current text size.\nExample:\n{{\u0026lt; icon \u0026#34;github\u0026#34; \u0026gt;}} Output: Custom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the shortcode by using the SVG filename without the .svg extension.\nKaTeX # The katex shortcode can be used to add mathematical expressions to article content using the KaTeX package. Refer to the online reference of supported TeX functions for the available syntax.\nTo include mathematical expressions in an article, simply place the shortcode anywhere with the content. It only needs to be included once per article and KaTeX will automatically render any markup on that page. Both inline and block notation are supported.\nInline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters. Alternatively, block notation can be generated using $$ delimiters.\nExample:\n{{\u0026lt; katex \u0026gt;}} \\\\(f(a,b,c) = (a^2+b^2+c^2)^3\\\\) \\(f(a,b,c) = (a^2+b^2+c^2)^3\\)\nKeyword # The keyword component can be used to visually highlight certain important words or phrases, e.g. professional skills etc. The keywordList shortcode can be used to group together multiple keyword items. Each item can have the following properties.\nParameter Description icon Optional icon to be used in the keyword The input is written in Markdown so you can format it however you please.\nExample1 :\n{{\u0026lt; keyword \u0026gt;}} Super skill {{\u0026lt; /keyword \u0026gt;}} Standalone skill Example2 :\n{{\u0026lt; keywordList \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;github\u0026#34; \u0026gt;}} Lorem ipsum dolor. {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;code\u0026#34; \u0026gt;}} **Important** skill {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; /keywordList \u0026gt;}} {{\u0026lt; keyword \u0026gt;}} *Standalone* skill {{\u0026lt; /keyword \u0026gt;}} Lorem ipsum dolor Important skill Standalone skill Lead # lead is used to bring emphasis to the start of an article. It can be used to style an introduction, or to call out an important piece of information. Simply wrap any Markdown content in the lead shortcode.\nExample:\n{{\u0026lt; lead \u0026gt;}} When life gives you lemons, make lemonade. {{\u0026lt; /lead \u0026gt;}} When life gives you lemons, make lemonade. List # List will display a list of recent articles. This shortcode requires a limit value to constraint the list. Additionally, it supports a where and a value in order to filter articles by their parameters. Note that this shortcode will not display its parent page but it will count for the limit value.\nParameter Description limit Required. the number of recent articles to display. title Optional title for the list, default is Recent cardView Optional card view enabled for the list, default is false where The variable to be used for the query of articles e.g. Type value The value that will need to match the parameter defined in where for the query of articles e.g. for where == Type a valid value could be sample The where and value values are used in the following query where .Site.RegularPages $where $value in the code of the shortcode. Check Hugo docs to learn more about which parameters are available to use. Example #1:\n{{\u0026lt; list limit=2 \u0026gt;}} Recent 1 Billion Rows Challenge 16 April 2024\u0026middot;1360 words\u0026middot;7 mins Data-Engineering Rust Python Duckdb Prefect 4 March 2024\u0026middot;29 words\u0026middot;1 min Example #2:\n{{\u0026lt; list title=\u0026#34;Samples\u0026#34; cardView=true limit=5 where=\u0026#34;Type\u0026#34; value=\u0026#34;sample\u0026#34; \u0026gt;}} Samples LTR/RTL # ltr and rtl allows you to mix your contents. Many RTL language users want to include parts of the content in LTR. Using this shortcode will let you do so, and by leveraging % as the outer-most dilemeter in the shortcode Hugo shortcodes, any markdown inside will be rendered normally.\nExample:\n- This is an markdown list. - Its per default a LTR direction {{% rtl %}} - هذه القائمة باللغة العربية - من اليمين الى اليسار {{% /rtl %}} This is an markdown list. Its per default a LTR direction هذه القائمة باللغة العربية من اليمين الى اليسار Markdown Importer # This shortcode allows you to import markdown files from external sources. This is useful for including content from other repositories or websites without having to copy and paste the content.\nParameter Description url Required URL to an externally hosted markdown file. Example:\n{{\u0026lt; mdimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/nunocoracao/master/README.md\u0026#34; \u0026gt;}} Hi there 👋 # 🐳 working as a Staff Product Manager @ Docker 🐡 Creator and maintainer of Blowfish @ Blowfish page 🚀 Personal blog - n9o.xyz 📚 mentoring @ mentorcruise Mermaid # mermaid allows you to draw detailed diagrams and visualisations using text. It uses Mermaid under the hood and supports a wide variety of diagrams, charts and other output formats.\nSimply write your Mermaid syntax within the mermaid shortcode and let the plugin do the rest.\nRefer to the official Mermaid docs for details on syntax and supported diagram types.\nExample:\n{{\u0026lt; mermaid \u0026gt;}} graph LR; A[Lemons]--\u0026gt;B[Lemonade]; B--\u0026gt;C[Profit] {{\u0026lt; /mermaid \u0026gt;}} graph LR; A[Lemons]--\u003eB[Lemonade]; B--\u003eC[Profit] Swatches # swatches outputs a set of up to three different colors to showcase color elements like a color palette. This shortcode takes the HEX codes of each color and creates the visual elements for each.\nExample\n{{\u0026lt; swatches \u0026#34;#64748b\u0026#34; \u0026#34;#3b82f6\u0026#34; \u0026#34;#06b6d4\u0026#34; \u0026gt;}} Output Timeline # The timeline creates a visual timeline that can be used in different use-cases, e.g. professional experience, a project\u0026rsquo;s achievements, etc. The timeline shortcode relies on the timelineItem sub-shortcode to define each item within the main timeline. Each item can have the following properties.\nParameter Description icon the icon to be used in the timeline visuals. header header for each entry badge text to place within the top right badge subheader entry\u0026rsquo;s subheader Example:\n{{\u0026lt; timeline \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;github\u0026#34; header=\u0026#34;header\u0026#34; badge=\u0026#34;badge test\u0026#34; subheader=\u0026#34;subheader\u0026#34; \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;Another Awesome Header\u0026#34; badge=\u0026#34;date - present\u0026#34; subheader=\u0026#34;Awesome Subheader\u0026#34; \u0026gt;}} With html code \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Coffee\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Tea\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;star\u0026#34; header=\u0026#34;Shortcodes\u0026#34; badge=\u0026#34;AWESOME\u0026#34; \u0026gt;}} With other shortcodes {{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; /timeline \u0026gt;}} header badge test subheader Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. Another Awesome Header date - present Awesome Subheader With html code Coffee Tea Milk Shortcodes AWESOME With other shortcodes TypeIt # TypeIt is the most versatile JavaScript tool for creating typewriter effects on the planet. With a straightforward configuration, it allows you to type single or multiple strings that break lines, delete \u0026amp; replace each other, and it even handles strings that contain complex HTML.\nBlowfish implements a sub-set of TypeIt features using a shortcode. Write your text within the typeit shortcode and use the following parameters to configure the behavior you want.\nParameter Description tag [String] html tag that will be used to render the strings. classList [String] List of css classes to apply to the html element. initialString [String] Initial string that will appear written and will be replaced. speed [number] Typing speed, measured in milliseconds between each step. lifeLike [boolean] Makes the typing pace irregular, as if a real person is doing it. startDelay [number] The amount of time before the plugin begins typing after being initialized. breakLines [boolean] Whether multiple strings are printed on top of each other (true), or if they\u0026rsquo;re deleted and replaced by each other (false). waitUntilVisible [boolean] Determines if the instance will begin when loaded or only when the target element becomes visible in the viewport. The default is true loop [boolean] Whether your strings will continuously loop after completing Example 1:\n{{\u0026lt; typeit \u0026gt;}} Lorem ipsum dolor sit amet {{\u0026lt; /typeit \u0026gt;}} Example 2:\n{{\u0026lt; typeit tag=h1 lifeLike=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} Example 3:\n{{\u0026lt; typeit tag=h3 speed=50 breakLines=false loop=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} Youtube Lite # A shortcut to embed youtube videos using the lite-youtube-embed library. This library is a lightweight alternative to the standard youtube embeds, and it\u0026rsquo;s designed to be faster and more efficient.\nParameter Description id [String] Youtube video id to embed. label [String] Label for the video params [String] Extras parameters for video playing Example 1:\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; \u0026gt;}} Example 2:\nYou can use all of Youtube\u0026rsquo;s player parameters for the params variable, as demonstrated below:\nThis video will start after 130 seconds (2m10)\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; params=\u0026#34;start=130\u0026#34; \u0026gt;}} This video will not have UI controls, will start playing at 130 seconds and will stop 10 seconds later.\nTo concatenate multiple options as shown below, you need to add the \u0026amp; character between them.\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; params=\u0026#34;start=130\u0026amp;end=10\u0026amp;controls=0\u0026#34; \u0026gt;}} More informations can be found on the youtubeLite GitHub repo and Youtube\u0026rsquo;s player parameters page.\n","date":"11 August 2020","externalUrl":null,"permalink":"/projects/another-project/","section":"Projects","summary":"My projects","title":"Another Project","type":"projects"},{"content":"","date":"11 August 2020","externalUrl":null,"permalink":"/tags/docs/","section":"Tags","summary":"","title":"Docs","type":"tags"},{"content":"","date":"11 August 2020","externalUrl":null,"permalink":"/tags/icon/","section":"Tags","summary":"","title":"Icon","type":"tags"},{"content":"","date":"11 August 2020","externalUrl":null,"permalink":"/tags/lead/","section":"Tags","summary":"","title":"Lead","type":"tags"},{"content":"","date":"11 August 2020","externalUrl":null,"permalink":"/tags/mermaid/","section":"Tags","summary":"","title":"Mermaid","type":"tags"},{"content":"","date":"11 August 2020","externalUrl":null,"permalink":"/tags/projects/","section":"Tags","summary":"","title":"Projects","type":"tags"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]